#!/usr/bin/python3
#This script is the part 3rd of "From Stacks to PCA" pipeline
#Dependence: BLAST+

#Input: 3 files and 1 string
#------ 1. Concater file generated by the script 2nd (2nd_ConcaterLoci.py)
#------ 2. Reference FASTA file
#------ 3. String name for the reference
#------ 4. nameout. a name for the run, for example analise5
#Outputs:
#------ 1. fasta file (*_concater_plus_ref.fasta) containing sequences for each
#       individual of concatenated loci from input 1, plus one additional
#       sequence for the reference with same loci sequence

import sys
import subprocess
#from Bio import SeqIO
import os

path1 = sys.argv[1] # data path
file1 = sys.argv[2] #concater file
file2 = sys.argv[3] #reference fasta
referencename = sys.argv[4]
nameout = sys.argv[5]

os.chdir( path1 )
path1 = path1 + os.sep

#file1 = path1 + file1
#file2 = path1 + file2
#referencename = path1 + referencename
nameout = path1 + nameout

#function to find reverse complement
def func_revcomp(my_seq):
	if any(x for x in my_seq if x.islower()):
		my_seq = my_seq.upper()
		case_return = "lower"
	else:
		case_return = "upper"

	catalog_revcomp = {"A":"T",
						"T":"A",
						"G":"C",
						"C":"G"
						}
	rev = [] #find reverse
	for i in my_seq:
		rev.insert(0, i)

	revcomp = []
	for j in rev:
		revcomp.append(catalog_revcomp[j])

	revcomp = "".join(revcomp)

	if case_return == "lower":
		revcomp = revcomp.lower()
	else:
		revcomp = revcomp.upper()
	return revcomp

#creates seqs dictionary with sequences for each loci
with open(file1,"r") as set1:
    seqs = {}
    for line in set1:
        if line != "\n":
            line = line.rstrip()
            if line[0] != '>':
                line = line.split("MMM")
                count = 0
                for i in line[1:]:
                    count +=1
                    if "?" not in i and str(count) not in seqs:
                        seqs[str(count)] = i
#fasta file with loci sequence that will be used as query during BLAST searches against reference genome
fastaoutput = open( path1 + "concater_sample.fasta","w")
for i in list(seqs.items()):
    fastaoutput.write(">"+i[0]+"\n"+i[1]+"\n");
fastaoutput.close()

#BLAST steps
makeblastdb = subprocess.Popen("makeblastdb -in " + file2 + " -dbtype nucl -out " + referencename + ".blastdb", shell=True)
makeblastdb.wait()

print ("Running BLASTn step...")

blastn = subprocess.Popen("blastn -query " + path1 + "concater_sample.fasta -db " + referencename + ".blastdb -evalue 1e-20 -outfmt 6 -out " + referencename + ".blastn", shell=True)
blastn.wait()

#read blast output
with open(referencename+".blastn","r") as set2:
    ref_coordinates = {}
    loc_coordinates = {}
    for i in set2:
        i = i.rstrip()
        i = i.split("\t")
        query = i[0]
        ref = i[1]
        startquery = i[6]
        stopquery = i[7]
        coordinatesloc = []
        coordinatesloc.append(startquery)
        coordinatesloc.append(stopquery)
        if query not in loc_coordinates:
            loc_coordinates[query] = coordinatesloc

        startref = i[8]
        stopref = i[9]
        coordinatesref = []
        coordinatesref.append(ref)
        coordinatesref.append(startref)
        coordinatesref.append(stopref)
        if query not in ref_coordinates:
            ref_coordinates[query] = coordinatesref

outputpa = open(referencename+"_loci_presence_absence.txt","w")
for i in seqs:
    if i in ref_coordinates:
        outputpa.write(i+" yes\n");
    else:
        outputpa.write(i+" no\n");
outputpa.close()

#catalog with genome ref sequences
referenceseqs = {}
#for record in SeqIO.parse(file2, "fasta"):
#    referenceseqs[record.id] = record.seq
with open(file2,"r") as set_fasta:
    for line in set_fasta:
        line = line.rstrip()
        if line[0] == '>':
            words=line.split()
            name=words[0][1:]
            referenceseqs[name]=''
        else:
            referenceseqs[name] = referenceseqs[name] + line

finalrefseqs = {}
for i in list(ref_coordinates.items()):
    locus = i[0]
    refheader = i[1][0]
    startref = int(i[1][1])
    stopref = int(i[1][2])

    startloc = int(loc_coordinates[locus][0])
    stoploc = int(loc_coordinates[locus][1])
    variableinstart = (startloc - 1) * "?"
    variableinstop = (80 - stoploc) * "?"
    #print (startloc,stoploc)

    if refheader in referenceseqs:
        if startref < stopref:
            if len(variableinstart+referenceseqs[refheader][startref-1:stopref]+variableinstop) == 80:
                finalrefseqs[locus] = variableinstart+referenceseqs[refheader][startref-1:stopref]+variableinstop
            elif len(variableinstart+referenceseqs[refheader][startref-1:stopref]+variableinstop) < 80:
                addtoend = int(80 - len(variableinstart+referenceseqs[refheader][startref-1:stopref]+variableinstop)) * "?"
                finalrefseqs[locus] = variableinstart+referenceseqs[refheader][startref-1:stopref]+variableinstop+addtoend
        else:
            if len(variableinstart+referenceseqs[refheader][stopref+1:startref]+variableinstop) == 80:
                finalrefseqs[locus] = variableinstart+func_revcomp(referenceseqs[refheader][stopref+1:startref])+variableinstop
            elif len(variableinstart+referenceseqs[refheader][stopref+1:startref]+variableinstop) < 80:
                addtoend = int(80 - len(variableinstart+referenceseqs[refheader][stopref+1:startref]+variableinstop)) * "?"
                finalrefseqs[locus] = variableinstart+func_revcomp(referenceseqs[refheader][stopref+1:startref])+variableinstop+addtoend

#write to concatenated file given as input the reference sequences of loci concatenated
concatenatedfile = open(file1,"a")
concatenatedfile.write(">"+referencename.replace(path1,"")+"\n");
presence_absense_inref = {} #dict with key locus number and presence absence information as values
for i in range(1,len(seqs)+1):
    if str(i) in finalrefseqs:
        presence_absense_inref[i] = "presence"
        if len(finalrefseqs[str(i)]) < 80:
            print((i,len(finalrefseqs[str(i)])))
        concatenatedfile.write("MMM"+str(finalrefseqs[str(i)]));
    else:
        concatenatedfile.write("MMM" + 80 * "?");
        presence_absense_inref[i] = "absence"
concatenatedfile.write("\n");
concatenatedfile.close()

#read concater file again but now it has the genome reference sequences
with open(file1,"r") as set1:
    seqsconcat = {}
    for line in set1:
        if line != "\n":
            line = line.rstrip()
            if line[0] == '>':
                name=line[1:]
                seqsconcat[name] = []
            else:
                line = line.split("MMM")
                line = line[1:]
                seqsconcat[name] = line

outputfinal = open(nameout+"_concater_plus_ref.fasta","w")
for i in list(seqsconcat.items()):
    outputfinal.write(">"+i[0]+"\n");
    for j in list(presence_absense_inref.items()):
        if j[1] == "presence":
            position = int(j[0]) - 1
            outputfinal.write("MMM"+str(i[1][position]));
    outputfinal.write("\n");
outputfinal.close()

#remove temporary files
if os.path.exists(referencename+".blastdb.nhr"):
    os.remove(referencename+".blastdb.nhr")
if os.path.exists(referencename+".blastdb.nin"):
    os.remove(referencename+".blastdb.nin")
if os.path.exists(referencename+".blastdb.nsq"):
    os.remove(referencename+".blastdb.nsq")
if os.path.exists( path1 + "concater_sample.fasta"):
    os.remove( path1 + "concater_sample.fasta")

print ("Phase 3 completed.")
